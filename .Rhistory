abline(a=0, b=1)
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.7, 0.3))
trainData <- iris[ind==1,]
testData <- iris[ind==2,]
library(randomForest)
rf <- randomForest(Species ~ ., data=trainData, ntree=100, proximity=TRUE)
table(predict(rf), trainData$Species)
print(rf)
attributes(rf)
plot(rf)
png('random_forest.png')
plot(rf)
dev.off()
importance(rf)
varImpPlot(rf)
irisPred <- predict(rf, newdata=testData)
table(irisPred, testData$Species)
plot(margin(rf, testData$Species))
png('random_forest_2.png')
plot(margin(rf, testData$Species))
dev.off()
function (package, help, pos = 2, lib.loc = NULL, character.only = FALSE,
library(fpc)
setwd('C:\\Users\\Ivan.Liuyanfeng\\Desktop\\ata_Mining_Work_Space\\rdatamining')
library(UsingR)
install.packages('UsingR')
setwd("C:\\Users\\Ivan.Liuyanfeng\\Desktop\\Data_Mining_Work_Space\\Data-Science-Regression-Models")
library(UsingR)
data(galton)
png('chi_par.png')
par(mfrow=c(1,2))
hist(galton$child,col='blue',breaks=100)
hist(galton$parent,col='blue',breaks=100)
dev.off()
par(mfrow=c(1,2))
hist(galton$child,col='blue',breaks=100)
hist(galton$parent,col='blue',breaks=100)
library(manipulate)
install.packages('manipulate')
install.packages("manipulate")
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
par(mfrow=c(1,1))
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
plot(galton$parent, galton$child, pch=19, col='blue')
png('galton.png')
plot(galton$parent, galton$child, pch=19, col='blue')
dev.off()
hist(galton$child,col="blue",breaks=100)
meanChild <- mean(galton$child)
lines(rep(meanChild,100),seq(0,150,length=100),col="red",lwd=5)
png('least_sqr.png')
hist(galton$child,col="blue",breaks=100)
meanChild <- mean(galton$child)
lines(rep(meanChild,100),seq(0,150,length=100),col="red",lwd=5)
dev.off()
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent", ylab = "child")
png('galton_freq.png')
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent", ylab = "child")
dev.off()
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
png('beta.png')
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
dev.off()
lm(I(child-mean(child))~I(parent-mean(parent))-1,data=galton)
y <- galton$chile
x <- galton$parent
beta1 <- cor(y,x)*sd(y)/sd(x)
y <- galton$child
x <- galton$parent
beta1 <- cor(y,x)*sd(y)/sd(x)
beta0 <- mean(y)-beta1*mean(x)
rbind(c(beta0,beta1),coef(lm(y~x)))
beta1 <- cor(y,x)*sd(x)/sd(y)
beta0 <- mean(x)-beta1*mean(y)
rbind(c(beta0,beta1),coef(lm(x~y)))
y<- (father.son$sheight - mean(father.son$sheight))/sd(father.son$sheight)
data(father.son)
y<- (father.son$sheight - mean(father.son$sheight))/sd(father.son$sheight)
library(UsingR)
data(father.son)
y<- (father.son$sheight - mean(father.son$sheight))/sd(father.son$sheight)
x<- (father.son$fheight - mean(father.son$fheight))/sd(father.son$fheight)
rho <- cor(x,y)
data(father.son)
y<- (father.son$sheight - mean(father.son$sheight))/sd(father.son$sheight)
x<- (father.son$fheight - mean(father.son$fheight))/sd(father.son$fheight)
rho <- cor(x,y)
myplot <- function(x,y){
plot(x,y,xlab="Father's height,normalizied",
ylab="Son's height, normailized",
xlim=c(-3,3),ylim=c(-3,3),
bg='lightblue',col='black',cex=1.1,pch=21,frame=F)
}
myplot(x,y)
png('nor_data.png')
myplot(x,y)
dev.off()
abline(0,1)
abline(0,rho,lwd=2)
abline(0,1/rho,lwd=2)
abline(h=0);abline(v=0)
png('nor_data.png')
myplot(x,y)
abline(0,1)
abline(0,rho,lwd=2)
abline(0,1/rho,lwd=2)
abline(h=0);abline(v=0)
dev.off()
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
beta1 <- cor(w,x)*sd(x)/sd(w)
beta1
beta0 <- mean(x)-beta1*mean(w)
beta0
beta1 <- cor(w,x)*sd(w)/sd(x)
beta1
beta0 <- mean(w)-beta1*mean(x)
beta0
lm(w~x)
lm(x~w)
y = (x-0.3)^2 * w
y
y = sum((x-0.3)^2 * w)
y
y = sum((x-0.1471)^2 * w)
y
y = sum((x-1.077)^2 * w)
y
y = sum((x-0.0025)^2 * w)
y
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
data(mtcars)
lm(mpg~weight, data=mtcars)
head(mtcars)
lm(mpg~wt, data=mtcars)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
require(caret)
preProcess(x = x,method=c('center','scale'))
x
?preProcess
preProcess(x = x,method='scale')
preProcess(x = data.frame(x),method='scale')
preProcess(x = data.frame(x),method=c('center','scale')
)
x <- preProcess(x = data.frame(x),method=c('center','scale'))
x
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
y <- preProcess(x = data.frame(x),method=c('center','scale'))
y
y[1]
y <- x-mean(x)
y
scale(y)
y
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
x-mean(x)
mean(x-mean(x))
y<-x-mean(x)
y
mean(y)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y<-x
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
lm(x~y)
library(swirl)
swirl()
install_from_swirl("Regression Models")
swirl()
plot(child~parent,galton)
plot(jitter(child,4)~parent,galton)
regrline <- lm(child~parent, galton)
regrline <- lm(child~parent, galton)
abline(regrline,lwd=3,col='red')
summary(regrline)
regrline <- lm(child~parent, galton)
fit <- lm(child~parent, galton)
summary(fit)
fit$residuals
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
ols.slope-ols.ic
lhs-rhs
all.equal(lhs)
all.equal()
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- est(fit)
varEst <- est(ols.slope, ols.ic)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes)
all.equal(varChild, varRes+varEst)
efit <- lm(accel~mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
manipulate(myPlot(beta), beta = slider(0.4, .8))
swirl()
library(manipulate)
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
?manipulate
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.4, .8, "step" = 0.02))
library(manipulate)
swirl
swirl()
swirl()
efit <- lm(accel~mag+dist, attenu)
fit <- lm(child~parent, galton)
sum(sqr(fit$residuals))/(n-2)
sum((fit$residuals)^2)/(n-2)
sqrt(sum(fit$residuals)^2/(n-2))
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mean(galton$chile)
mu <- mean(galton$chile)
mu <- mean(galton$child)
sTot <- galton$child - mu
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(fit-mu)
sRes <- deviance(fit)
sRes/sTot
1-sRes/sTot
summary(fit)$r.squared
cor(galton$child,galton$parents)
head(galton)
cor(galton$child,galton$parent)
cor(galton$child,galton$parent)^2
ones <- rep(1,nrow(galton))
lm(child~ones+parent-1,galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
lm(Fertility ~ . , data=swiss)
all <- lm(Fertility ~ . , data=swiss)
summary(all)
lm(Fertility ~ argricuture, data= swiss)
lm(Fertility ~ Argricuture, data= swiss)
lm(Fertility ~ Agriculture, data= swiss)
summary(lm(Fertility ~ Agriculture, data= swiss))
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Examination,swiss$Education)
cor(swiss$Agrucyktyre,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms
makelms()
ec <- sum(swiss$Examination, swiss$Catholic)
ec <- swiss$Examination+swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
all-efit
all$coef
all$coefficients-efit$coefficients
6
dim(InsectSprays)
head(InsectSprays)
head(InsectSprays,15)
A
sa
sA
summary(M[,2])
summary(InsectSprays[,2])
sapply(InsectSprays, class)
fit <- lm(count~spray,InsectSprays)
summary(fit)
summary(fit)$coef
summary(fit)$coef[,1]
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count~spray -1 ,InsectSprays)
summary(nfit)$coef
spray2 <- relevel(x = InsectSprays$spray)
spray2 <- relevel(x = InsectSprays$spray,ref = c)
spray2 <- relevel(x = InsectSprays$spray,ref = "c")
spray2 <- relevel(x = InsectSprays$spray,ref = "C")
spray2 <- relevel(x = InsectSprays$spray,ref = \"C\")
spray2 <- relevel(InsectSprays$spray,\"C\")
spray2 <- relevel(InsectSprays$spray,"C")
fit2 <- lm(count~spray,InsectSprays)
fit2 <- lm(count~spray2,InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
hunger[,13]
neame(hunger)
names(hunger)
fit (Year~. , data=hunger)
fit<- lm(Year~. , data=hunger)
fit<- lm(Year~Numeric , data=hunger)
fit <- lm(hunger$Numeric ~ hunger$Year)
summary(fit)$ecof
summary(fit)$coef
hunger[hunger$Sex=="Female"]
x[hunger$Sex=="Female"]
lmF <- lm(hunger$Numeric[hunger$Sex=="Female"] ~ hunger$Year[hunger$Sex=="Female"])
summary(lmF)$coef
lmM <- lm(hunger$Numeric[hunger$Sex=="Male"] ~ hunger$Year[hunger$Sex=="Male"])
lmBoth <- lm(Numeric ~ Year +Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year+Sex+Sex*Year, hunger)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- lm(y ~ x, out2[-1,])
plot(fitno, which=1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1,"y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma<- sqrt()
sigma<- sqrt(1-resid(fit)[1]/resno)
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- resid(fit)/sigma*sqrt(1-hatvalues(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1<- sqrt(deviance(fit)/df.residual(fit))
sigma1<-  sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma * sqrt(1-hatvalues(fit)[1]))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
predict(fitno, out2)-predict(fit, out2)
dy <- predict(fitno, out2)-predict(fit, out2)
dy
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility ~. , swiss)
vif(mdl)
md2 <- lm(Fertility ~.-Education , swiss)
mdl2 <- lm(Fertility ~ . -Examination, swiss)
vif(mmdl2)
vif(mdl2)
simbias()
x1c <- simbias()
apply(x1c, 1, mean)
fit1
fit1<-lm(Fertility~., swiss)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- deviance(fit1)/45
n <- (deviance(fit1) - deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
ravenData
mdl <- glm(avenWinNum ~ ravenScore, family='binomial')
mdl <- glm(avenWinNum ~ ravenScore, family='binomial', data=ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, family='binomial', data=ravenData)
predict(mdl, data.frame(ravenScore=c(0, 3, 6)
predict(mdl, data.frame(ravenScore=c(0, 3, 6))
predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
head(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
confint(mdl, 'date')
exp(confint(mdl, 'date'))
which.max(hits[,'visits']
which.max(hits[,'visits'])
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
offset=log(visits+1)
log(lambda/(visits+1)) = b0 + b1*date
mdl2 <-  glm(visits ~ date, poisson, hits, offset=log(visits+1))
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
